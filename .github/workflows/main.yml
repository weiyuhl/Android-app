name: Generate, Build, and Upload Android App

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  generate-build-upload:
    runs-on: ubuntu-latest

    steps:
    # 1. 检出代码
    - name: Checkout code
      uses: actions/checkout@v2

    # 2. 设置 JDK 11
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'

    # 3. 设置 Android SDK
    - name: Set up Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 30
        target: android-30
        build-tools: 30.0.3

    # 4. 创建 Android 项目
    - name: Generate Android Project
      run: |
        mkdir -p my-android-app/app/src/main/java/com/example
        cat > my-android-app/settings.gradle <<EOL
        rootProject.name = "MyAndroidApp"
        EOL

        cat > my-android-app/build.gradle <<EOL
        buildscript {
            repositories {
                google()
                mavenCentral()
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:7.0.4'
                classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.0'
            }
        }
        allprojects {
            repositories {
                google()
                mavenCentral()
            }
        }
        EOL

        cat > my-android-app/app/build.gradle <<EOL
        plugins {
            id 'com.android.application'
            id 'org.jetbrains.kotlin.android'
        }
        android {
            compileSdkVersion 30
            defaultConfig {
                applicationId "com.example.myandroidapp"
                minSdkVersion 21
                targetSdkVersion 30
                versionCode 1
                versionName "1.0"
            }
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
        }
        dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.0"
            implementation "org.eclipse.jgit:org.eclipse.jgit:7.0.0.202409031743-r"
        }
        EOL

        cat > my-android-app/app/src/main/AndroidManifest.xml <<EOL
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.example.myandroidapp">
            <application
                android:label="My Android App"
                android:theme="@style/Theme.AppCompat.Light.DarkActionBar">
                <activity android:name=".MainActivity">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>
        </manifest>
        EOL

        cat > my-android-app/app/src/main/java/com/example/MainActivity.kt <<EOL
        package com.example

        import androidx.appcompat.app.AppCompatActivity
        import android.os.Bundle

        class MainActivity : AppCompatActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                setContentView(android.R.layout.simple_list_item_1)
            }
        }
        EOL

    # 5. 提交项目文件到仓库
    - name: Commit and Push Project Files
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd my-android-app
        git init
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Generate Android project with JGit"
        git remote add origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
        git fetch origin main # 拉取远程 main 分支的内容
        git pull --rebase origin main # 合并远程内容到本地
        git branch -M main # 确保本地分支为 main
        git push -u origin main # 推送到远程 main 分支

    # 6. 构建 APK
    - name: Build APK
      run: |
        cd my-android-app
        ./gradlew wrapper
        ./gradlew assembleDebug

    # 7. 提交 APK 文件到仓库
    - name: Commit and Push APK File
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd my-android-app
        mkdir -p apk
        cp app/build/outputs/apk/debug/app-debug.apk apk/
        git add apk/app-debug.apk
        git commit -m "Add generated APK"
        git push origin main
