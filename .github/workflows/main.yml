name: Build Android App with Docker Buildx

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. 拉取 Android 构建 Docker 镜像
      - name: Pull Android Build Docker Image
        run: |
          docker pull cimg/android:2022.04  # 使用具体的版本标签

      # 4. 生成 Android 项目
      - name: Generate Android Project
        run: |
          mkdir -p my-android-app/app/src/main/java/com/example
          cat > my-android-app/settings.gradle <<EOL
          rootProject.name = "MyAndroidApp"
          EOL

          cat > my-android-app/build.gradle <<EOL
          buildscript {
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.0.4'
                  classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.0'
              }
          }
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOL

          cat > my-android-app/app/build.gradle <<EOL
          plugins {
              id 'com.android.application'
              id 'org.jetbrains.kotlin.android'
          }
          android {
              compileSdkVersion 30
              defaultConfig {
                  applicationId "com.example.myandroidapp"
                  minSdkVersion 21
                  targetSdkVersion 30
                  versionCode 1
                  versionName "1.0"
              }
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
          }
          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.0"
              implementation "org.eclipse.jgit:org.eclipse.jgit:7.0.0.202409031743-r"
          }
          EOL

          cat > my-android-app/app/src/main/AndroidManifest.xml <<EOL
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.example.myandroidapp">
              <application
                  android:label="My Android App"
                  android:theme="@style/Theme.AppCompat.Light.DarkActionBar">
                  <activity android:name=".MainActivity">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOL

          cat > my-android-app/app/src/main/java/com/example/MainActivity.kt <<EOL
          package com.example

          import androidx.appcompat.app.AppCompatActivity
          import android.os.Bundle

          class MainActivity : AppCompatActivity() {
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContentView(android.R.layout.simple_list_item_1)
              }
          }
          EOL

      # 5. 构建 Android 项目镜像并运行构建
      - name: Build Android APK with Docker Buildx
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 --tag my-android-app-build --file Dockerfile .

      # 6. 提交生成的 APK 到仓库
      - name: Commit and Push APK File
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p apk
          cp app/build/outputs/apk/debug/app-debug.apk apk/
          git add apk/app-debug.apk
          git commit -m "Add generated APK"
          git push origin main
