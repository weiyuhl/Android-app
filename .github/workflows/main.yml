name: Generate, Build, and Push Kotlin App

on:
  push:
    branches:
      - main
  workflow_dispatch: # 支持手动触发

jobs:
  generate-build-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码仓库
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. 初始化环境并创建项目
      - name: Generate Kotlin project
        run: |
          # 创建项目目录
          mkdir kotlin-example-app
          cd kotlin-example-app

          # 初始化 Gradle Wrapper
          gradle init --type basic

          # 创建标准 Android 项目文件结构
          mkdir -p app/src/main/java/com/example/app
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values

          # 创建基础的 build.gradle 文件
          cat > build.gradle <<EOF
          plugins {
              id 'com.android.application'
              id 'kotlin-android'
          }

          android {
              compileSdkVersion 33
              defaultConfig {
                  applicationId "com.example.app"
                  minSdkVersion 21
                  targetSdkVersion 33
                  versionCode 1
                  versionName "1.0"
              }
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
          }

          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.0"
          }
          EOF

          # 创建基础的 Kotlin MainActivity
          cat > app/src/main/java/com/example/app/MainActivity.kt <<EOF
          package com.example.app

          import android.os.Bundle
          import androidx.appcompat.app.AppCompatActivity

          class MainActivity : AppCompatActivity() {
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContentView(R.layout.activity_main)
              }
          }
          EOF

          # 创建简单的 XML 布局文件
          cat > app/src/main/res/layout/activity_main.xml <<EOF
          <LinearLayout
              xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:orientation="vertical"
              android:gravity="center">

              <TextView
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="Hello, Kotlin!" />
          </LinearLayout>
          EOF

          # 创建 values 文件夹中的 strings.xml
          cat > app/src/main/res/values/strings.xml <<EOF
          <resources>
              <string name="app_name">Kotlin Example App</string>
          </resources>
          EOF

      # 3. 构建 APK
      - name: Build APK
        run: |
          cd kotlin-example-app
          ./gradlew assembleDebug
          cd ..

      # 4. 压缩项目文件
      - name: Archive Project Files
        run: zip -r kotlin-example-app.zip kotlin-example-app

      # 5. 上传项目文件和 APK 文件为构建产物
      - name: Upload Project Files
        uses: actions/upload-artifact@v3
        with:
          name: kotlin-example-app
          path: kotlin-example-app.zip

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app-debug.apk
          path: kotlin-example-app/app/build/outputs/apk/debug/app-debug.apk

      # 6. 推送生成的项目到新分支
      - name: Push Generated Project
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b generated-app
          git add .
          git commit -m "Generated Kotlin example project and APK"
          git push origin generated-app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}